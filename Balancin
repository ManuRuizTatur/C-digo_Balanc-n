/* El siguiente código es el utilizado para el funcionamiento del balancín PID.
 * Se recomienda realizar las conexiones del circuito, encender la fuente que 
 * alimenta al motor y colocar la pelotita en el cenro antes de cargar el 
 * código en la placa Arduino Uno. Una vez cargado el código, mover la pelotita
 * y comenzar a jugar!!!
 */
 
#include <Wire.h>
#include <Servo.h>



///////////////////////Inputs/outputs///////////////////////
int Analog_in = A0;
Servo myservo;  // create servo object to control a servo, later attatched to D9
///////////////////////////////////////////////////////


////////////////////////Variables///////////////////////
int Read = 0;
float distance = 0.0;
float elapsedTime, time, timePrev;        //Variables for time control
float distance_previous_error, distance_error;
int period = 50;  //Refresh rate period of the loop is 50ms
///////////////////////////////////////////////////////


///////////////////PID constants///////////////////////
float kp=11; 
float ki=0.7;
float kd=5000; 
float distance_setpoint = 11;           //Distancia desde el sensor hasta elcentro de la barra en cm
float PID_p, PID_i, PID_d, PID_total;
///////////////////////////////////////////////////////



void setup() {
  //analogReference(EXTERNAL);
  Serial.begin(9600);  
  myservo.attach(9);  // attaches the servo on pin 9 to the servo object
  myservo.write(125); //Put the servco at angle 125, so the balance is in the middle
  pinMode(Analog_in,INPUT);  
  time = millis();
}

void loop() {
  if (millis() > time+period)
  {
    time = millis();    
    distance = get_dist(100);           //Toma  el  promedio de 100 muestras
    distance_error = distance - distance_setpoint;   
    PID_p = kp * distance_error;
    float dist_diference = distance_error - distance_previous_error;     
    PID_d = kd*((distance_error - distance_previous_error)/period);
      
    if(-3 < distance_error && distance_error < 3)
    {
      PID_i = PID_i + (ki * distance_error);
    }
    else
    {
      PID_i = 0;
    }
  
    PID_total = PID_p + PID_i + PID_d;  
    PID_total = map(PID_total, -150, 150, 0, 150);
  
    if(PID_total < 20){PID_total = 20;}
    if(PID_total > 160) {PID_total = 160; } 
  
    myservo.write(PID_total+30);  
    distance_previous_error = distance_error;

    Serial.print ("\n");
    Serial.print ("Distancia: ");
    Serial.print (distance);
    Serial.print ("\n");
    Serial.print ("Error: ");
    Serial.print ( distance_error);
    Serial.print ("\n");
    
    
  }
}




float get_dist(int n)
{
  //long sum=0;
  //for(int i=0;i<n;i++)
  //{
    //sum=sum+analogRead(Analog_in);
   //sum=analogRead(Analog_in);
  //}  
  //float adc=sum/n;
  //float volts = analogRead(adc)*0.0048828125;  // value from sensor * (5/1024)
  //float volts = sum*0.003222656;  // value from sensor * (3.3/1024) EXTERNAL analog refference
  float sum=analogRead(Analog_in);
  float distance_cm = -50*log(0.00148301*sum);
  //float distance_cm = 13*pow(volts, -1); 
  //float distance_cm = pow(10,log10(sum/1821.2)/-0.65);

  if(distance_cm<=12)
  {
      distance_cm=7;
  }
      
  return(distance_cm);
}
